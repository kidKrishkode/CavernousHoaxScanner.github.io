let mediaType, url, dfd;
let converter;
let pdf;
function DFD(){
  this.active = true;
  this.signal = null;
}
function CONVERTER(){
  this.active = true;
  this.signal = null;
}
function pdfCo(){
  this.active = true;
  this.signal = null;
}

document.addEventListener("DOMContentLoaded",() => {
  dfd = new DFD();
  converter = new CONVERTER();
  pdf= new pdfCo();
});
DFD.prototype.mediaChange = function(){
  return new Promise((resolve, reject) => {
    const fileInput = document.getElementById('file-input');
    const preview = document.querySelector('.preview');
    const placeholder = document.querySelector('.placeholder');
    const dropBox = document.querySelector('.drop-box');
    fileInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if(file){
        const reader = new FileReader();
        reader.onload = () => {
          const dataURL = reader.result;
          preview.innerHTML = '';
          if(file.type.startsWith('image/')){
            const img = document.createElement('img');
            img.src = dataURL;
            preview.appendChild(img);
            mediaType = 'Image'; 
            url = dataURL;
            resolve([mediaType, url]);
          }else if(file.type.startsWith('video/')){
            let video = document.createElement('video');
            video.autoplay = true;
            video.controls = true;
            video.muted = true;
            let source = document.createElement('source');
            source.src = dataURL;
            source.type = 'video/mp4';
            video.appendChild(source);
            preview.appendChild(video);
            mediaType = 'Video'; 
            url = dataURL;
            resolve([mediaType, url]);
          }else{
            reject('Unwanted media formate detected!');
          }
          placeholder.style.display = 'none';
        };
        reader.readAsDataURL(file);
      }
    });
  
    dropBox.addEventListener('dragover', (e) => {
      e.preventDefault();
    });
    
    dropBox.addEventListener('drop', (e) => {
      e.preventDefault();
      const file = e.dataTransfer.files[0];
      fileInput.files = e.dataTransfer.files;
      fileInput.dispatchEvent(new Event('change'));
    });
  });
}
DFD.prototype.getVideoDuration = function(videoPath){
  return new Promise((resolve, reject) => {
    var video = document.createElement('video');
    video.preload = 'metadata';
    video.onloadedmetadata = function(){
      var duration = video.duration;
      var xhr = new XMLHttpRequest();
      xhr.open('HEAD', videoPath, true);
      xhr.onreadystatechange = function(){
        if(xhr.readyState === 4){
          resolve({ duration });
        }
      };
      xhr.send();
    };
    video.onerror = function(){
      reject('Error to loading video');
    };
    video.src = videoPath;
  });
}
DFD.prototype.displayVinfo = function(path){
  dfd.getVideoDuration(path).then(info => {
    return Math.round(info.duration);
  }).catch(error => {
    console.error(error);
  });
}
DFD.prototype.Filevalidation = function(max, min){
  const fi = document.getElementById('file-input');
  if(fi.files.length > 0){
    for(let i = 0; i <= fi.files.length - 1; i++){
      const fsize = fi.files.item(i).size;
      const file = Math.round((fsize / 1024));
      if(file >= max){
        return "File too Big, please select a file less than 4mb";
      }else if(file < min){
        return "File too small, please select a file greater than 2mb";
      }else{
        return file;
      }
    }
  }
}
DFD.prototype.engine_start = function(){
  dfd.engine_active();
}
DFD.prototype.engine_active = function(){
  let type = document.getElementById('media-type');
  let acc = document.getElementById('media-acc');
  let size = document.getElementById('media-size');
  let dur = document.getElementById('media-due');
  dfd.mediaChange().then(media => {
    if(media[0] == 'Image'){
      let temp = dfd.Filevalidation(30 * 1024, 5);
      if(temp>=0){
        type.textContent = media[0].toString();
        acc.textContent = "Accepted";
        dfd.signal = true;
        size.textContent = temp+' Kb';
        dur.textContent = 'Static';
      }else{
        inValidsizeError(temp);
        dfd.signal = false;
      }
    }else if(media[0] == 'Video'){
      let temp = dfd.Filevalidation(60 * 1024, 200);
      if(temp>=0){
        type.textContent = media[0].toString();
        acc.textContent = "Accepted";
        dfd.signal = true;
        size.textContent = temp+' Kb';
        dfd.getVideoDuration(media[1]).then(info => {
          dur.textContent = Math.round(info.duration)+' s';
        }).catch(error => {
          console.error(error);
          acc.textContent = 'Video inner data is corrupted!';
          dfd.signal = false;
        });
      }else{
        inValidsizeError(temp);
        dfd.signal = false;
      }
    }else{
      console.warn("Engine not work!");
      dfd.signal = false;
    }
  }).catch(e => {
    console.log(e);
  });
}
function inValidsizeError(message){
  let acc = document.getElementById('media-acc');
  let size = document.getElementById('media-size');
  acc.textContent = message;
  size.textContent = 'Null';
}
pdfCo.prototype.mediaChange = function(){
  return new Promise((resolve, reject) => {
    const fileInput = document.getElementById('file-input');
    const preview = document.querySelector('.preview');
    const placeholder = document.querySelector('.placeholder');
    const dropBox = document.querySelector('.drop-box');
    fileInput.addEventListener('change', (e) => {
      preview.innerHTML = '';
      for(let i=0;i<e.target.files.length;i++){
      let file = e.target.files[i];
      if(file){
        const reader = new FileReader();
        reader.onload = () => {
          const dataURL = reader.result;
          if(file.type.startsWith('image/')){
            const img = document.createElement('img');
            img.src = dataURL;
            preview.appendChild(img);
            mediaType = 'Image'; 
            url = dataURL;
            resolve([mediaType, url]);
         
          }else{
            reject('Unwanted media formate detected!');
          }
          placeholder.style.display = 'none';
        };
        reader.readAsDataURL(file);
      }
    }
    });
  
    dropBox.addEventListener('dragover', (e) => {
      e.preventDefault();
    });
    
    dropBox.addEventListener('drop', (e) => {
      e.preventDefault();
      const file = e.dataTransfer.files[0];
      fileInput.files = e.dataTransfer.files;
      fileInput.dispatchEvent(new Event('change'));
    });
  });
}

pdfCo.prototype.Filevalidation = function(max, min){
  const fi = document.getElementById('file-input');
  if(fi.files.length > 0){
    for(let i = 0; i <= fi.files.length - 1; i++){
      const fsize = fi.files.item(i).size;
      const file = Math.round((fsize / 1024));
      if(file >= max){
        return "File too Big, please select a file less than 4mb";
      }else if(file < min){
        return "File too small, please select a file greater than 2mb";
      }else{
        return file;
      }
    }
  }
}
pdfCo.prototype.engine_start = function(){
  pdf.engine_active();
}
pdfCo.prototype.engine_active = function(){
  let type = document.getElementById('media-type');
  let acc = document.getElementById('media-acc');
  let size = document.getElementById('media-size');
  let dur = document.getElementById('media-due');
  pdf.mediaChange().then(media => {
    if(media[0] == 'Image'){
      let temp = pdf.Filevalidation(30 * 1024, 5);
      if(temp>=0){
        type.textContent = media[0].toString();
        acc.textContent = "Accepted";
        pdf.signal = true;
        size.textContent = temp+' Kb';
        dur.textContent = 'Static';
      }else{
        inValidsizeError(temp);
        pdf.signal = false;
      }
    
    }else{
      console.warn("Engine not work!");
      pdf.signal = false;
    }
  }).catch(e => {
    console.log(e);
  });
}
CONVERTER.prototype.mediaChange = function(){
  return new Promise((resolve, reject) => {
    const fileInput = document.getElementById('file-input');
    const preview = document.querySelector('.preview');
    const placeholder = document.querySelector('.placeholder');
    const dropBox = document.querySelector('.drop-box');
    fileInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if(file){
        const reader = new FileReader();
        reader.onload = () => {
          const dataURL = reader.result;
          preview.innerHTML = '';
          if(file.type.startsWith('image/')){
            const img = document.createElement('img');
            img.src = dataURL;
            preview.appendChild(img);
            mediaType = 'Image'; 
            url = dataURL;
            resolve([mediaType, url]);
          }else{
            reject('Unwanted media formate detected!');
          }
          placeholder.style.display = 'none';
        };
        reader.readAsDataURL(file);
      }
    });
  
    dropBox.addEventListener('dragover', (e) => {
      e.preventDefault();
    });
    
    dropBox.addEventListener('drop', (e) => {
      e.preventDefault();
      const file = e.dataTransfer.files[0];
      fileInput.files = e.dataTransfer.files;
      fileInput.dispatchEvent(new Event('change'));
    });
  });
}
CONVERTER.prototype.engine_start = function(){
  converter.engine_active();
}
CONVERTER.prototype.engine_active = function(){
  let type = document.getElementById('media-type');
  let acc = document.getElementById('media-acc');
  let size = document.getElementById('media-size');
  let path = document.getElementById('media-path');
  converter.mediaChange().then(media => {
    if(media[0] == 'Image'){
      let temp = dfd.Filevalidation(30 * 1024, 5);
      if(temp>=0){
        type.textContent = media[0].toString();
        acc.textContent = "Accepted";
        converter.signal = true;
        size.textContent = temp+' Kb';
        path.textContent = media[1];
        // if(media[1].startsWith('data:image/')){
        //   acc.textContent = "Not Accepted";
        //   converter.signal = false;
        // }
      }else{
        inValidsizeError(temp);
      }
    }else{
      console.warn("Engine not work!");
    }
  }).catch(e => {
    console.log(e);
  });
}