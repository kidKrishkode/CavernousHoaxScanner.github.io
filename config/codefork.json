[
    {
        "id": 0,
        "lang": "Node Js",
        "name": "Image Converter",
        "method": "POST",
        "code": "// Import the CHSCDN plugin using npm//n\nconst@ s|CHSCDN|n = f|require|n(s'chscdn'n).default;\n// Create an instance of the CHSCDN class//n\nlet@ s|chscdn |n = new@ g|CHSCDN|n();\n\n// Define the local image path//n\nlet@ s|image|n = s'http:/|/127.0.0.1:3000/dp.png'n;\n\n// Convert the local image to a base64 string//n\nlet@ s|base64_image|n = await@ s|chscdn|n.f|image2base64|n(s|image|n); // Alternative: image_to_base64//n\n\n// Describe the desire image extension//n\nlet@ s|desire_extension|n = s'png'n;\n\n// Set up API parameters//n\nlet@ s|api_value|n = { s|task:|n s'image compress 'n, s|media|n: s|base64_image|n, s|extension|n: s|desire_extension|n};\n\n// Receive the API response//n\nlet@ s|response|n = await@ s|chscdn|n.f|APICaller|n(s|api_value|n);\n\n// Check for errors from the user side//n\nif@(s|chscdn|n.f|error_detect|n(s|response|n, s'mute'n)){\n\tconsole@|.error(s'Error occurred while calling CHS API!'n);\n}else@{\n\t// Display the result in the developer console//n\n\tconsole@|.log(s|response|n?.s|result|n);\n}\n\n"
    },
    {
        "id": 1,
        "lang": "React Js",
        "name": "Image Converter",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 2,
        "lang": "Vanilla Js",
        "name": "Image Converter",
        "method": "POST",
        "code": "// Connect the CHSCDN plugin//n\n// Create an instance of the CHSCDN class//n\nlet@ s|chscdn |n = new@ g|CHSCDN|n();\n\n// Define the local image path//n\nlet@ s|image|n = s'C:/Users/Pictures/dp.png'n;\n\n// Convert the local image to a base64 string//n\nlet@ s|base64_image|n = await@ s|chscdn|n.f|image2base64|n(s|image|n); // Alternative: image_to_base64//n\n\n// Describe the desire image extension//n\nlet@ s|desire_extension|n = s'jpg'n;\n\n// Set up API parameters//n\nlet@ s|api_value|n = { s|task:|n s'image convert'n, s|media|n: s|base64_image|n, s|extension|n: s|desire_extension|n};\n\n// Receive the API response//n\nlet@ s|response|n = await@ s|chscdn|n.f|APICaller|n(s|api_value|n);\n\n// Check for errors from the user side//n\nif@(s|chscdn|n.f|error_detect|n(s|response|n, s'mute'n)){\n\tconsole@|.error(s'Error occurred while calling CHS API!'n);\n}else@{\n\t// Display the result in the developer console//n\n\tconsole@|.log(s|response|n?.s|result|n);\n}\n\n"
    },
    {
        "id": 3,
        "lang": "Python",
        "name": "Image Converter",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 4,
        "lang": "Node Js",
        "name": "Image Compressor",
        "method": "POST",
        "code": "// Import the CHSCDN plugin using npm//n\nconst@ s|CHSCDN|n = f|require|n(s'chscdn'n).default;\n// Create an instance of the CHSCDN class//n\nlet@ s|chscdn |n = new@ g|CHSCDN|n();\n\n// Define the local image path//n\nlet@ s|image|n = s'http:/|/127.0.0.1:3000/dp.png'n;\n\n// Convert the local image to a base64 string//n\nlet@ s|base64_image|n = await@ s|chscdn|n.f|image2base64|n(s|image|n); // Alternative: image_to_base64//n\n\n// Describe the compress/quality parcentage//n\nlet@ s|quality|n = 70;\n\n// Set up API parameters//n\nlet@ s|api_value|n = { s|task:|n s'image compress 'n, s|media|n: s|base64_image|n, s|quality|n: s|desire_quality|n};\n\n// Receive the API response//n\nlet@ s|response|n = await@ s|chscdn|n.f|APICaller|n(s|api_value|n);\n\n// Check for errors from the user side//n\nif@(s|chscdn|n.f|error_detect|n(s|response|n, s'mute'n)){\n\tconsole@|.error(s'Error occurred while calling CHS API!'n);\n}else@{\n\t// Display the result in the developer console//n\n\tconsole@|.log(s|response|n?.s|result|n);\n}\n\n"
    },
    {
        "id": 5,
        "lang": "React Js",
        "name": "Image Compressor",
        "method": "POST",
        "code": "import@ s|React|n, { f|useState|n } from@ s'react'n;\nimport@ s|CHSCDN|n from@ s'chscdn'n; // Import CHSCDN module//n\n\nconst@ f|ImageCompressor|n = () => {\n\n\t// Function to compress image using CHS API//n\n\tconst@ f|compressImage|n = async@ () => {\n\t\ttry@{\n\t\t\t// Connect the CHSCDN plugin//n\n\t\t\t// Create an instance of the CHSCDN class//n\n\t\t\tlet@ s|chscdn |n = new@ g|CHSCDN|n();\n\n\t\t\t// Define the local image path//n\n\t\t\tlet@ s|image|n = f|require|n(s'../assets/example.png'n);\n\n\t\t\t// Convert the local image to a base64 string//n\n\t\t\tlet@ s|base64_image|n = await@ s|chscdn|n.f|image2base64|n(s|image|n); // Alternative: image_to_base64//n\n\n\t\t\t// Describe the compress/quality parcentage//n\n\t\t\tlet@ s|quality|n = 70;\n\n\t\t\t// Set up API parameters//n\n\t\t\tlet@ s|api_value|n = { s|task:|n s'image compress 'n, s|media|n: s|base64_image|n, s|quality|n: s|desire_quality|n};\n\n\t\t\t// Receive the API response//n\n\t\t\tlet@ s|response|n = await@ s|chscdn|n.f|APICaller|n(s|api_value|n);\n\n\t\t\t// Check for errors from the user side//n\n\t\t\tif@(s|chscdn|n.f|error_detect|n(s|response|n, s'mute'n)){\n\t\t\t\tconsole@|.error(s'Error occurred while calling CHS API!'n);\n\t\t\t}else@{\n\t\t\t\t// Display the result in the developer console//n\n\t\t\t\tconsole@|.log(s|response|n?.s|result|n);\n\t\t\t}\n\n\t\tcatch@(s|e|n){\n\t\t\tconsole@|.log(s'Compression faild: 'n,s|e|n);\n\t\t}\n\t};\n\n\treturn@ (\n\t\t<>\n\t\t.....\n\t\t</>\n\t);\n};\n\nexport@ default@ f|ImageCompressor|n;\n\n"
    },
    {
        "id": 6,
        "lang": "Vanilla Js",
        "name": "Image Compressor",
        "method": "POST",
        "code": "// Connect the CHSCDN plugin//n\n// Create an instance of the CHSCDN class//n\nlet@ s|chscdn |n = new@ g|CHSCDN|n();\n\n// Define the local image path//n\nlet@ s|image|n = s'C:/Users/Pictures/dp.png'n;\n\n// Convert the local image to a base64 string//n\nlet@ s|base64_image|n = await@ s|chscdn|n.f|image2base64|n(s|image|n); // Alternative: image_to_base64//n\n\n// Describe the compress/quality parcentage//n\nlet@ s|quality|n = 70;\n\n// Set up API parameters//n\nlet@ s|api_value|n = { s|task:|n s'image compress 'n, s|media|n: s|base64_image|n, s|quality|n: s|desire_quality|n};\n\n// Receive the API response//n\nlet@ s|response|n = await@ s|chscdn|n.f|APICaller|n(s|api_value|n);\n\n// Check for errors from the user side//n\nif@(s|chscdn|n.f|error_detect|n(s|response|n, s'mute'n)){\n\tconsole@|.error(s'Error occurred while calling CHS API!'n);\n}else@{\n\t// Display the result in the developer console//n\n\tconsole@|.log(s|response|n?.s|result|n);\n}\n\n"
    },
    {
        "id": 7,
        "lang": "Python",
        "name": "Image Compressor",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 8,
        "lang": "Node Js",
        "name": "Deepfake Detector",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 9,
        "lang": "React Js",
        "name": "Deepfake Detector",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 10,
        "lang": "Vanilla Js",
        "name": "Deepfake Detector",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 11,
        "lang": "Python",
        "name": "Deepfake Detector",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 12,
        "lang": "Node Js",
        "name": "Image to PDF",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 13,
        "lang": "React Js",
        "name": "Image to PDF",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 14,
        "lang": "Vanilla Js",
        "name": "Image to PDF",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 15,
        "lang": "Python",
        "name": "Image to PDF",
        "method": "POST",
        "code": "0"
    },
    {
        "id": 16,
        "lang": "Python",
        "name": "Image Converter",
        "method": "Define",
        "code": "from@ g|fastapi|n import@ g|FastAPI|n, f|Query|n\nfrom@ g|fastapi|n.g|middleware|n.g|cors |n import@ g|CORSMiddleware|n\nfrom@ g|pydantic|n import@ g|BaseModel|n\nimport@ g|Preprocessor|n\nimport@ g|TaskMaster|n\n\ns|app|n = g|FastAPI|n()\n\ns|app|n.f|add_middleware|n(g|Preprocessor|n.s|CORSMiddleware|n)\n\nclasse g|ImageData|n(g|BaseModel|n):\n\ts|form|n: g|str|n\n\ts|img |n: g|str|n\n\n@s|app|n.f|get|n(s'/api/imageConverter'n)\ndef read_root/(s|data|n: g|ImageData|n):\n\ts|src|n = g|TaskMaster|n.f|convert_img |n(s|data|n.s|img |n, s|data|n.s|form|n)\n\treturn@ g|Responce|n.f|model|n(s|src|n, g|Preprocessor|n.f|timeStamp|n())\n\n"
    },
    {
        "id": 17,
        "lang": "Node Js",
        "name": "Docs 1",
        "method": "POST",
        "code": "from@ g|whitelotus |n import@ g|CHSWEB|n, g|CHSAPI|n, f|chscdn|n;\nimport@ g|Preprocessor|n;\n\npublic@ function async@ index/(CHSWEB: g|class |n, CHSAPI: g|class |n){\n\t$s|this |n->s|load|n->f|model|n(s'Greetings from CHS'n);\n\tawait@ g|CHSAPI|n.s|data|n[s'request'n]() = $s|this |n->f|greet_model|n(() => \n\t\tif@(g|CHSAPI|n.s|data|n[s'responce'n].f|is_valid|n())\n\t\t\tg|CHSWEB|n->s|load|n->s|view|n(s'user/index'n);\n\t}).catch@(s|error|n =>\n\t\tconsole@|.log(s'Failed to greet user for unwanted conditions!'n)\n\t);\n}\n\nif@ s|__name__|n == s'__main__'n{\n\ts|user_data|n = {s'user'n: s|API_KEY|n};\n\ts|app|n = g|Index|n(s|user_data|n);\n}\n"
    },
    {
        "id": 18,
        "lang": "React Js",
        "name": "CDN Plug",
        "method": "GET",
        "code": "// Import chscdn using npm at first//n\nimport@ g|React|n from@ s'react'n;\nimport@ s'chscdn/style.css 'n;\nimport@ { s|chscdn |n } from@ s'chscdn/script'n; // Importing from the package //n \n\nconst@ f|App |n = () => {\n\t// Create an instance of the chscdn class //n\n\tconst@ s|cdnInstance|n = new@ g|chscdn|n();\n\t/*....\n\n\tuse that pre-buid code as you want\n\n\t....*/\n\treturn@ (\n\t\t<>\n\t\t</>\n\t);\n};\n\nexport@ default@ f|App|n;\n\n"
    },
    {
        "id": 19,
        "lang": "HTML",
        "name": "CDN Plug",
        "method": "GET",
        "code": "<span class='token attr-name'><span class='token punctuation'>&lt;</span>!doctype html<span class='token punctuation'>&gt;</span></span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>html</span> <span class='token attr-name'>lang=</span><span class='token attr-value'>'en'</span><span class='token tag'><span class='token punctuation'>&gt;</span></span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>head<span class='token punctuation'>&gt;</span></span>\n\t<span class='c'><span class='token punctuation'>&lt;</span>!-- Required meta tags --<span class='token punctuation'>&gt;</span></span>\n\t<span class='token tag'><span class='token punctuation'>&lt;</span>meta</span> <span class='token attr-name'>charset=</span><span class='token attr-value'>'UTF-8'</span><span class='token tag'>/<span class='token punctuation'>&gt;</span></span>\n\t<span class='token tag'><span class='token punctuation'>&lt;</span>meta</span> <span class='token attr-name'>name=</span><span class='token attr-value'>'viewport'</span> <span class='token attr-name'>content=</span><span class='token attr-value'>'width=device-width, initial-scale=1'</span><span class='token tag'>/<span class='token punctuation'>&gt;</span></span>\n\t<span class='c'><span class='token punctuation'>&lt;</span>!-- CHSCDN CSS --<span class='token punctuation'>&gt;</span></span>\n\t<span class='token tag'><span class='token punctuation'>&lt;</span>link</span> <span class='token attr-name'>rel=</span><span class='token attr-value'>'stylesheet'</span> <span class='token attr-name'>href=</span><span class='token attr-value'>'https://chscdn.vercel.app/cdn/v1/css/chscdn.min.css'</span> <span class='token attr-name'>crossorigin=</span><span class='token attr-value'>'anonymous'</span><span class='token tag'>/<span class='token punctuation'>&gt;</span></span>\n\t<span class='token tag'><span class='token punctuation'>&lt;</span>title <span class='token attr-name'>version=</span><span class='token attr-value'>'1.0'</span><span class='token punctuation'>&gt;</span></span>document<span class='token tag'><span class='token punctuation'>&lt;</span>/title<span class='token punctuation'>&gt;</span></span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>/head<span class='token punctuation'>&gt;</span></span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>style<span class='token punctuation'>&gt;</span></span>\n\t<span class='c'>/* Write your css code here */</span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>/style<span class='token punctuation'>&gt;</span></span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>body<span class='token punctuation'>&gt;</span></span>\n\t<span class='c'><span class='token punctuation'>&lt;</span>!-- Write your website code here --<span class='token punctuation'>&gt;</span></span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>/body<span class='token punctuation'>&gt;</span></span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>script </span><span class='token attr-name'>src=</span><span class='token attr-value'>'https://chscdn.vercel.app/cdn/v1/js/chscdn.js'</span><span class='token tag'><span class='token punctuation'>&gt;</span><span class='token punctuation'>&lt;</span>/script<span class='token punctuation'>&gt;</span></span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>script<span class='token punctuation'>&gt;</span></span>\n\t<span class='c'>// Write your js code here </span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>/script<span class='token punctuation'>&gt;</span></span>\n<span class='token tag'><span class='token punctuation'>&lt;</span>/html<span class='token punctuation'>&gt;</span></span>\n\n"
    },
    {
        "id": 20,
        "lang": "Vanilla Js",
        "name": "CDN Use",
        "method": "POST",
        "code": "// Connect the CHSCDN plugin//n\n// Create an instance of the CHSCDN class//n\nlet@ s|chscdn |n = new@ g|CHSCDN|n();\n\n// Define the local image path//n\nlet@ s|image|n = s'C:/Users/Pictures/dp.png'n;\n\n// Convert the local image to a base64 string//n\nlet@ s|base64_image|n = await@ s|chscdn|n.f|image2base64|n(s|image|n); // Alternative: image_to_base64//n\n\n// Set up API parameters//n\nlet@ s|api_value|n = { s|task:|n s'deepfake detect'n, s|media|n: s|base64_image|n };\n\n// Receive the API response//n\nlet@ s|response|n = await@ s|chscdn|n.f|APICaller|n(s|api_value|n);\n\n// Check for errors from the user side//n\nif@(s|chscdn|n.f|error_detect|n(s|response|n, s'mute'n)){\n\tconsole@|.error(s'Error occurred while calling CHS API!'n);\n}else@{\n\t// Display the result in the developer console//n\n\tconsole@|.log(s|response|n?.s|result|n?.s|class |n);\n}\n\n"
    },
    {
        "id": 21,
        "lang": "JSON",
        "name": "API response",
        "method": "GET",
        "code": "{\n\t<span class='token attr-name'>&quot;metadata&quot;</span>: {\n\t\t<span class='token attr-name'>&quot;version&quot;</span>: <span class='token attr-value'>&quot;1.0.0&quot;</span>,\n\t\t<span class='token attr-name'>&quot;request_id&quot;</span>: <span class='token attr-value'>&quot;3045dd*************7fa38&quot;</span>,\n\t\t<span class='token attr-name'>&quot;header&quot;</span>: {\n\t\t\t<span class='token attr-name'>&quot;Content-Type&quot;</span>: <span class='token attr-value'>&quot;application/json&quot;</span>\n\t\t},\n\t\t<span class='token attr-name'>&quot;processing_time&quot;</span>: <span class='token attr-value'>&quot;1s&quot;</span>,\n\t\t<span class='token attr-name'>&quot;timestamp&quot;</span>: <span class='token attr-value'>&quot;2025-04-02 19:48:12&quot;</span>\n\t},\n\t<span class='token attr-name'>&quot;network&quot;</span>: {\n\t\t<span class='token attr-name'>&quot;url&quot;</span>: <span class='token attr-value'>&quot;https://chsapi.vercel.app/api/&quot;</span>,\n\t\t<span class='token attr-name'>&quot;kernel&quot;</span>: <span class='token attr-value'>&quot;inphant api&quot;</span>,\n\t\t<span class='token attr-name'>&quot;provider&quot;</span>: <span class='token attr-value'>&quot;chsapi&quot;</span>\n\t},\n\t<span class='token attr-name'>&quot;result&quot;</span>: {\n\t\t<span class='token attr-name'>&quot;class&quot;</span>: <span class='token attr-value'>&quot;Real&quot;</span>, \n\t\t<span class='token attr-name'>&quot;accuracy&quot;</span>: <span class='token attr-value'>96.8</span>\n\t},\n\t<span class='token attr-name'>&quot;source&quot;</span>: <span class='token attr-value'>&quot;WHITE LOTUS Community&quot;</span>,\n\t<span class='token attr-name'>&quot;status&quot;</span>: {\n\t\t<span class='token attr-name'>&quot;code&quot;</span>: <span class='token attr-value'>200</span>,\n\t\t<span class='token attr-name'>&quot;message&quot;</span>: <span class='token attr-value'>&quot;Media processed successfully&quot;</span>\n\t}\n}\n"
    }
]
